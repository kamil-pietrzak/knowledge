{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # 1) Check version:\

\f1\b \cf2 docker version
\f0\b0 \cf0 \
\
# 2) First program:\

\f1\b \cf2 docker run hello-world
\f0\b0 \cf0 \
\
# What's happening: 'docker run' creates a new container and it's looking for an imgage 'hello-world'.\
# First it looks for a local image in 'image cache'.\
# If the 'image cache' is empty it goes to 'docker hub' which is a public repository of images.\
# Since you are running the program for the first time it downloads the 'hello-world' image\
# form ' docker hub' and stores it locally in the 'image cache'.\
\
# 3) Default command override:\

\f1\b \cf2 docker run <image name> command!
\f0\b0 \cf0 \
# Basically, image files contian information about "File System" (file system snapshot) and startup command.\
# Command overrride replaces the startup command.\
# Example: docker run busybox echo Test\
\
# 4) List running containers and its information:\

\f1\b \cf2 docker ps
\f0\b0 \cf0 \
\
# 5) List history of all containers that was running:\

\f1\b \cf2 docker ps --all
\f0\b0 \cf0 \
\
# 6) What happens when 'docker run <image name>' is executed\
docker run = docker create (*creates file system*) + docker start (*runs startup command*) \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic.png \width15160 \height13780 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
# 7) Delete all stopped containers:\

\f1\b \cf2 docker system prune
\f0\b0 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screenshot 2018-12-05 at 16.24.00.png \width21300 \height8020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
# 8) How to check logs:\

\f1\b \cf2 docker logs <container id>
\f0\b0 \cf0 \
\
Example:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic 1.png \width15040 \height2020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
# 9) How to stop a container:\

\f1\b \cf2 docker stop <container id>\
\

\f0\b0 \cf3 If process is not stopped within 10 seconds, docker will use \'91docker kill <container id>\'92\cf0 \
\
{{\NeXTGraphic Pasted Graphic 2.png \width18560 \height9680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
This sends termination of a signal to stop the process. \
\
There is also a way to kill the process by:\

\f1\b \cf2 docker kill <container id> \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0 \cf0 {{\NeXTGraphic Screenshot 2018-12-05 at 16.36.08.png \width17120 \height9480 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}